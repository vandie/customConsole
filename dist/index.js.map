{"version":3,"file":"index.js","sources":["../src/functions/parsers/string.function.ts","../src/functions/parsers/number.function.ts","../src/functions/parsers/big-int.function.ts","../src/functions/parsers/boolean.function.ts","../src/functions/parsers/symbol.function.ts","../src/functions/parsers/object.function.ts","../src/functions/parsers/undefined.function.ts","../src/functions/parsers/function.function.ts","../src/functions/create-log.function.ts"],"sourcesContent":["import { Parser } from \"../../types\";\n\nexport const stringParser: Parser<string> = (value: string) => value;","import { Parser } from \"../../types\";\n\nexport const numberParser: Parser<number> = (value: number) => value.toString();","import { Parser } from \"../../types\";\n\nexport const bigIntParser: Parser<bigint> = (value: bigint) => value.toString();","import { Parser } from \"../../types\";\n\nexport const booleanParser: Parser<boolean> = (value: boolean) => value ? 'true' : 'false';","import { Parser } from \"../../types\";\n\nexport const symbolParser: Parser<symbol> = (value: symbol) => '[symbol]'","import { Parser, ParserOptions } from \"../../types\";\n\nexport const objectParser: Parser<object> = (value: object, options: ParserOptions = {}) => options.stringifyObjects ? JSON.stringify(value, null, 2) : value.toString();","import { Parser } from \"../../types\";\n\nexport const undefinedParser: Parser<undefined> = (value: undefined) => 'undefined';","import { Parser } from \"../../types\";\n\nexport const functionParser: Parser<Function> = (value: Function) => value.toString();","import { LogCallback, LogFunction, LogOptions, Parser } from \"../types\";\nimport * as inbuiltParsers from './parsers';\n\nexport const createLog = (output: LogCallback, options: LogOptions = {}): LogFunction => {\n  const parsers = options.customParsers ? {\n    ...inbuiltParsers,\n    ...options.customParsers\n  } : inbuiltParsers;\n\n  return (...args: any) => {\n    let prefixs = '';\n    let text = args.map((value: any) => {\n      const type = typeof value;\n      const parser: Parser<typeof value> = parsers[type];\n      if(parser) return parser(value, options);\n      else return `[unrecognisedType ${type}]`;\n    }).join(options.separator || '\\n');\n    \n    if(options.includeTimestamp) prefixs = ` ${Date.now()}`;\n\n    output(prefixs.length ? `${prefixs.trim()}: ${text}`: text);\n  };\n}"],"names":[],"mappings":";;;;;;;;AAEO,MAAM,YAAY,GAAmB,CAAC,KAAa,KAAK,KAAK;;ACA7D,MAAM,YAAY,GAAmB,CAAC,KAAa,KAAK,KAAK,CAAC,QAAQ,EAAE;;ACAxE,MAAM,YAAY,GAAmB,CAAC,KAAa,KAAK,KAAK,CAAC,QAAQ,EAAE;;ACAxE,MAAM,aAAa,GAAoB,CAAC,KAAc,KAAK,KAAK,GAAG,MAAM,GAAG,OAAO;;ACAnF,MAAM,YAAY,GAAmB,CAAC,KAAa,KAAK,UAAU;;ACAlE,MAAM,YAAY,GAAmB,CAAC,KAAa,EAAE,UAAyB,EAAE,KAAK,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE;;ACAjK,MAAM,eAAe,GAAsB,CAAC,KAAgB,KAAK,WAAW;;ACA5E,MAAM,cAAc,GAAqB,CAAC,KAAe,KAAK,KAAK,CAAC,QAAQ,EAAE;;;;;;;;;;;;;;MCCxE,SAAS,GAAG,CAAC,MAAmB,EAAE,UAAsB,EAAE;IACrE,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,mCAChC,cAAc,GACd,OAAO,CAAC,aAAa,IACtB,cAAc,CAAC;IAEnB,OAAO,CAAC,GAAG,IAAS;QAClB,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAU;YAC7B,MAAM,IAAI,GAAG,OAAO,KAAK,CAAC;YAC1B,MAAM,MAAM,GAAyB,OAAO,CAAC,IAAI,CAAC,CAAC;YACnD,IAAG,MAAM;gBAAE,OAAO,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;gBACpC,OAAO,qBAAqB,IAAI,GAAG,CAAC;SAC1C,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC;QAEnC,IAAG,OAAO,CAAC,gBAAgB;YAAE,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAExD,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE,GAAE,IAAI,CAAC,CAAC;KAC7D,CAAC;AACJ;;;;;;"}